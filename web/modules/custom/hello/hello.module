<?php

  use Drupal\Core\Form\FormBase;
  use Drupal\Core\Form\FormStateInterface;

function hello_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
  switch ($route_name) {

    // Main module help for the block module.
    case 'help.page.hello':
      return '<p>' . t('Blocks are boxes of content rendered into an area, or region, of a web page. The default theme Bartik, for example, implements the regions "Sidebar first", "Sidebar second", "Featured", "Content", "Header", "Footer", etc., and a block may appear in any one of these areas. The <a href=":blocks">blocks administration page</a> provides a drag-and-drop interface for assigning a block to a region, and for controlling the order of blocks within regions.', array(
        ':blocks' => \Drupal::url('block.admin_display'),
      )) . '</p>';

    // Help for another path in the block module.
    case 'block.admin_display':
      return '<p>' . t('This page provides a drag-and-drop interface for assigning a block to a region, and for controlling the order of blocks within regions. Since not all themes implement the same regions, or display regions in the same way, blocks are positioned on a per-theme basis. Remember that your changes will not be saved until you click the <em>Save blocks</em> button at the bottom of the page.') . '</p>';
  }
}
  function hello_cron() {
    \Drupal::messenger()->addMessage(t( "hello run successfully"));
    // Short-running operation example, not using a queue:
    // Delete all expired records since the last cron run.
    $expires = \Drupal::state()
      ->get('hello.last_check', 0);
    \Drupal::database()
      ->delete('hello_table')
      ->condition('expires', $expires, '>=')
      ->execute();
    \Drupal::state()
      ->set('hello.last_check', REQUEST_TIME);

    // Long-running operation example, leveraging a queue:
    // Queue news feeds for updates once their refresh interval has elapsed.
    $queue = \Drupal::queue('aggregator_feeds');
    $ids = \Drupal::entityManager()
      ->getStorage('aggregator_feed')
      ->getFeedIdsToRefresh();
    foreach (Feed::loadMultiple($ids) as $feed) {
      if ($queue
        ->createItem($feed)) {

        // Add timestamp to avoid queueing item more than once.
        $feed
          ->setQueuedTime(REQUEST_TIME);
        $feed
          ->save();
      }
    }
    $ids = \Drupal::entityQuery('aggregator_feed')
      ->condition('queued', REQUEST_TIME - 3600 * 6, '<')
      ->execute();
    if ($ids) {
      $feeds = Feed::loadMultiple($ids);
      foreach ($feeds as $feed) {
        $feed
          ->setQueuedTime(0);
        $feed
          ->save();
      }
    }
  }

  /**
   * Implements hook_corn().
   * 
   */
function hello_corn(){
  $purge_days_number = \Drupal::config('hello.settings')->get('purge_days_number');
  if($purge_days_number != '0'){
    \Drupal::database()->delete('hello_user_statistics')
      ->condition('time', REQUEST_TIME - $purge_days_number * (24 * 3600), '<')
      ->execute();
  }
}

/**
 * Implements hook_user_login()
 * 
 */

  function hello_user_login(\Drupal\user\UserInterface $account) {


    \Drupal::messenger()->addMessage(t( 'Data insterted'));

    //getting roles user
    $roles = \Drupal::config('hello.settings')->get('user_statistics_roles');

    //getting user roles
    $user_roles = $account->getroles();

    //comparer 2 tableau array_intersect is the php function which compare two array tabels
    $diff = array_intersect($roles, $user_roles);

    if(count($diff) > 0){
      // Insert the record to table.
      \Drupal::database()->insert('hello_user_statistics')->fields(
        [
          'uid' => $account->id(),
          'action' => '1',
          'time' => REQUEST_TIME,
        ])

        ->execute();
    }


  }

  function hello_user_logout(\Drupal\Core\Session\AccountProxyInterface $account) {

    \Drupal::messenger()->addMessage(t( 'You are signed out'));
    // Insert the record to table.

    //getting roles user
    $roles = \Drupal::config('hello.settings')->get('user_statistics_roles');

    //getting user roles
    $user_roles = $account->getroles();

    //comparer 2 tableau array_intersect is the php function which compare two array tabels
    $diff = array_intersect($roles, $user_roles);

    if(count($diff) > 0) {
      \Drupal::database()->insert('hello_user_statistics')
        ->fields([
          'uid' => $account->id(),
          'action' => '0',
          'time' => REQUEST_TIME,
        ])
        ->execute();
    }
  }

  function hello_user_delete(\Drupal\user\UserInterface $user) {
    \Drupal::database()->delete('hello_user_statistics')->condition('uid',  $user->id())->execute();
  }

  /***
   * @param $existing
   * @param $type
   * @param $theme
   * @param $path
   *
   * @return array
   * hook_theme()
   */


  function hello_theme($existing, $type, $theme, $path){
    return array(
      'hello_module' => array(
        'template' => 'hello-module',
        'variables' => array('user' => NULL, 'count'=> NULL),
      ),
    );

  }


  //Hook form alter
 
  function hello_form_alter(array &$form, FormStateInterface $form_state, $form_id ){
    //ksm($form_id);
    if($form_id == "node_article_form")
    {
      ksm($form);
      $form['revision_log']['#access'] = false;

    }

  }

  function hello_form_user_admin_settings_alter(array &$form, FormStateInterface $form_state){

    //ksm($form);
    $roles = \Drupal::entityTypeManager()->getStorage('user_role')->loadMultiple();
    unset($roles['anonymous']);
    //ksm($roles);

    $options = [];
    foreach ($roles as $role){
      $options[$role->id()] = $role->label();
    }
    $form['user_statistics'] = [
      '#type' => 'details',
      '#title' => t('Choose roles to track'),
      '#open' => TRUE,
      '#weight' => -1,
    ];

    $form['user_statistics'] ['options']= [
      '#type' => 'checkboxes',
      '#options' => $options,
      '#default_value' => \Drupal::config('hello.settings')->get('user_statistics_roles'),
    ];


    $form['#submit'][] = 'hello_user_admin_settings_form_submit';
    //ksm($form);

  }

  function hello_user_admin_settings_form_submit(array &$form, FormStateInterface $form_state){
    $options = $form_state->getValue('options');
    \Drupal::configFactory()->getEditable('hello.settings')->set('user_statistics_roles', $options)->save();
  }